/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import pm.little.api.models.FormBlueprint;
import pm.little.api.models.FormField;
import pm.little.api.models.FormFieldMapper;
import pm.little.api.models.FormsFormBlueprintUuidFieldsFieldUuidPutRequest;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-26T00:36:51.210059+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "forms", description = "the forms API")
public interface FormsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /forms/{form_blueprint_uuid} : Delete form template
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidDelete",
        summary = "Delete form template",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/forms/{form_blueprint_uuid}"
    )
    
    default ResponseEntity<Void> formsFormBlueprintUuidDelete(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /forms/{form_blueprint_uuid}/fields/{field_uuid} : Remove field from form
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param fieldUuid The UUID of the form field (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidFieldsFieldUuidDelete",
        summary = "Remove field from form",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/forms/{form_blueprint_uuid}/fields/{field_uuid}"
    )
    
    default ResponseEntity<Void> formsFormBlueprintUuidFieldsFieldUuidDelete(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @Parameter(name = "field_uuid", description = "The UUID of the form field", required = true, in = ParameterIn.PATH) @PathVariable("field_uuid") UUID fieldUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forms/{form_blueprint_uuid}/fields/{field_uuid} : Get field details
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param fieldUuid The UUID of the form field (required)
     * @return Form field (status code 200)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidFieldsFieldUuidGet",
        summary = "Get field details",
        responses = {
            @ApiResponse(responseCode = "200", description = "Form field", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormField.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forms/{form_blueprint_uuid}/fields/{field_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FormField> formsFormBlueprintUuidFieldsFieldUuidGet(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @Parameter(name = "field_uuid", description = "The UUID of the form field", required = true, in = ParameterIn.PATH) @PathVariable("field_uuid") UUID fieldUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"form_field_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"input_type\" : \"text\", \"description\" : \"description\", \"title\" : \"title\", \"required\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /forms/{form_blueprint_uuid}/fields/{field_uuid} : Update field
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param fieldUuid The UUID of the form field (required)
     * @param formsFormBlueprintUuidFieldsFieldUuidPutRequest  (required)
     * @return Updated form field (status code 200)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidFieldsFieldUuidPut",
        summary = "Update field",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated form field", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormField.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/forms/{form_blueprint_uuid}/fields/{field_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FormField> formsFormBlueprintUuidFieldsFieldUuidPut(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @Parameter(name = "field_uuid", description = "The UUID of the form field", required = true, in = ParameterIn.PATH) @PathVariable("field_uuid") UUID fieldUuid,
        @Parameter(name = "FormsFormBlueprintUuidFieldsFieldUuidPutRequest", description = "", required = true) @Valid @RequestBody FormsFormBlueprintUuidFieldsFieldUuidPutRequest formsFormBlueprintUuidFieldsFieldUuidPutRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"form_field_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"input_type\" : \"text\", \"description\" : \"description\", \"title\" : \"title\", \"required\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forms/{form_blueprint_uuid}/fields : List form fields
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of form field mappings (status code 200)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidFieldsGet",
        summary = "List form fields",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of form field mappings", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FormFieldMapper.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forms/{form_blueprint_uuid}/fields",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FormFieldMapper>> formsFormBlueprintUuidFieldsGet(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_field\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"order\" : 0 }, { \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_field\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"order\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /forms/{form_blueprint_uuid}/fields : Add field to form
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param formFieldUuid Form field UUID in the query (required)
     * @param order Order or position (general integer query usage) (required)
     * @return Updated list of form field mappings (status code 200)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidFieldsPost",
        summary = "Add field to form",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated list of form field mappings", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FormFieldMapper.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/forms/{form_blueprint_uuid}/fields",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FormFieldMapper>> formsFormBlueprintUuidFieldsPost(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @NotNull @Parameter(name = "form_field_uuid", description = "Form field UUID in the query", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "form_field_uuid", required = true) UUID formFieldUuid,
        @NotNull @Parameter(name = "order", description = "Order or position (general integer query usage)", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "order", required = true) Integer order
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_field\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"order\" : 0 }, { \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_field\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"order\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forms/{form_blueprint_uuid} : Get form template
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @return Form blueprint (status code 200)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidGet",
        summary = "Get form template",
        responses = {
            @ApiResponse(responseCode = "200", description = "Form blueprint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormBlueprint.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forms/{form_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FormBlueprint> formsFormBlueprintUuidGet(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /forms/{form_blueprint_uuid} : Update form template
     *
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param formBlueprint  (required)
     * @return Updated form blueprint (status code 200)
     */
    @Operation(
        operationId = "formsFormBlueprintUuidPut",
        summary = "Update form template",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated form blueprint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormBlueprint.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/forms/{form_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FormBlueprint> formsFormBlueprintUuidPut(
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @Parameter(name = "FormBlueprint", description = "", required = true) @Valid @RequestBody FormBlueprint formBlueprint
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /forms : List form templates
     *
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of form templates (status code 200)
     */
    @Operation(
        operationId = "formsGet",
        summary = "List form templates",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of form templates", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FormBlueprint.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/forms",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FormBlueprint>> formsGet(
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /forms : Create form template
     *
     * @param formBlueprint  (required)
     * @return Created form blueprint (status code 200)
     */
    @Operation(
        operationId = "formsPost",
        summary = "Create form template",
        responses = {
            @ApiResponse(responseCode = "200", description = "Created form blueprint", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormBlueprint.class))
            })
        },
        security = {
            @SecurityRequirement(name = "admin_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/forms",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FormBlueprint> formsPost(
        @Parameter(name = "FormBlueprint", description = "", required = true) @Valid @RequestBody FormBlueprint formBlueprint
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
