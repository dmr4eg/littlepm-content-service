/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import pm.little.api.models.TaskInstance;

import java.util.List;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.NotNull;
import java.util.Map;
import java.util.Optional;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-27T23:47:32.256351+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "task-instances", description = "the task-instances API")
public interface TaskInstancesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /task-instances : List all task instances
     *
     * @return A list of TaskInstance (status code 200)
     */
    @Operation(
        operationId = "taskInstancesGet",
        summary = "List all task instances",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of TaskInstance", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskInstance.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task-instances",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TaskInstance>> taskInstancesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : { \"task_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"status\" : true }, { \"id\" : { \"task_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"status\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /task-instances : Create a new task instance
     *
     * @param taskInstance  (required)
     * @return Created task instance (status code 200)
     */
    @Operation(
        operationId = "taskInstancesPost",
        summary = "Create a new task instance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Created task instance", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstance.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task-instances",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstance> taskInstancesPost(
        @Parameter(name = "TaskInstance", description = "", required = true) @Valid @RequestBody TaskInstance taskInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"task_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /task-instances/{task_blueprint_uuid}/{user_uuid} : Delete a task instance
     *
     * @param taskBlueprintUuid The UUID of the task blueprint (required)
     * @param userUuid The UUID of the user (required)
     * @return No Content (status code 204)
     */
    @Operation(
        operationId = "taskInstancesTaskBlueprintUuidUserUuidDelete",
        summary = "Delete a task instance",
        responses = {
            @ApiResponse(responseCode = "204", description = "No Content")
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/task-instances/{task_blueprint_uuid}/{user_uuid}"
    )
    
    default ResponseEntity<Void> taskInstancesTaskBlueprintUuidUserUuidDelete(
        @Parameter(name = "task_blueprint_uuid", description = "The UUID of the task blueprint", required = true, in = ParameterIn.PATH) @PathVariable("task_blueprint_uuid") UUID taskBlueprintUuid,
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /task-instances/{task_blueprint_uuid}/{user_uuid} : Get a user&#39;s specific task instance
     *
     * @param taskBlueprintUuid The UUID of the task blueprint (required)
     * @param userUuid The UUID of the user (required)
     * @return TaskInstance (status code 200)
     */
    @Operation(
        operationId = "taskInstancesTaskBlueprintUuidUserUuidGet",
        summary = "Get a user's specific task instance",
        responses = {
            @ApiResponse(responseCode = "200", description = "TaskInstance", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstance.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task-instances/{task_blueprint_uuid}/{user_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskInstance> taskInstancesTaskBlueprintUuidUserUuidGet(
        @Parameter(name = "task_blueprint_uuid", description = "The UUID of the task blueprint", required = true, in = ParameterIn.PATH) @PathVariable("task_blueprint_uuid") UUID taskBlueprintUuid,
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"task_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /task-instances/{task_blueprint_uuid}/{user_uuid} : Update a task instance
     *
     * @param taskBlueprintUuid The UUID of the task blueprint (required)
     * @param userUuid The UUID of the user (required)
     * @param taskInstance  (required)
     * @return Updated task instance (status code 200)
     */
    @Operation(
        operationId = "taskInstancesTaskBlueprintUuidUserUuidPut",
        summary = "Update a task instance",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated task instance", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskInstance.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/task-instances/{task_blueprint_uuid}/{user_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskInstance> taskInstancesTaskBlueprintUuidUserUuidPut(
        @Parameter(name = "task_blueprint_uuid", description = "The UUID of the task blueprint", required = true, in = ParameterIn.PATH) @PathVariable("task_blueprint_uuid") UUID taskBlueprintUuid,
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "TaskInstance", description = "", required = true) @Valid @RequestBody TaskInstance taskInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : { \"task_blueprint_uuid\" : \"665c599d-5c8d-4d20-aaab-7ffaba150606\", \"user_uuid\" : \"66de88ad-5c8d-4d20-a0ab-bbb7ccc15333\" }, \"status\" : true }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
