/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.validation.Valid;
import pm.little.api.models.Error;
import pm.little.api.models.Task;
import pm.little.api.models.TaskUpdate;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Tag(name = "Tasks", description = "Task management within projects")
public interface TasksApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /tasks/{taskUUID} : Delete task
     * Permanently remove a task
     *
     * @param taskUUID Unique task identifier (required)
     * @return Task deleted successfully (status code 204)
     *         or Insufficient permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "deleteTask",
        summary = "Delete task",
        description = "Permanently remove a task",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Task deleted successfully"),
            @ApiResponse(responseCode = "403", description = "Insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/tasks/{taskUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> deleteTask(
        @Parameter(name = "taskUUID", description = "Unique task identifier", required = true, in = ParameterIn.PATH) @PathVariable("taskUUID") UUID taskUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tasks/{taskUUID} : Get task details
     * Retrieve detailed information about a specific task
     *
     * @param taskUUID Unique task identifier (required)
     * @return Task details retrieved (status code 200)
     *         or Insufficient permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "getTask",
        summary = "Get task details",
        description = "Retrieve detailed information about a specific task",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task details retrieved", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "403", description = "Insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tasks/{taskUUID}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Task> getTask(
        @Parameter(name = "taskUUID", description = "Unique task identifier", required = true, in = ParameterIn.PATH) @PathVariable("taskUUID") UUID taskUUID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprintUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"Research main competitors' features\", \"title\" : \"Competitor Analysis\", \"taskUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"day\" : \"MONDAY\", \"projectUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"status\" : \"pending\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /tasks/{taskUUID} : Update task
     * Modify existing task details
     *
     * @param taskUUID Unique task identifier (required)
     * @param taskUpdate  (required)
     * @return Task updated successfully (status code 200)
     *         or Invalid request parameters (status code 400)
     *         or Insufficient permissions (status code 403)
     *         or Resource not found (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Update task",
        description = "Modify existing task details",
        tags = { "Tasks" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Task.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid request parameters", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "403", description = "Insufficient permissions", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "Resource not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/tasks/{taskUUID}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Task> updateTask(
        @Parameter(name = "taskUUID", description = "Unique task identifier", required = true, in = ParameterIn.PATH) @PathVariable("taskUUID") UUID taskUUID,
        @Parameter(name = "TaskUpdate", description = "", required = true) @Valid @RequestBody TaskUpdate taskUpdate
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprintUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"dueDate\" : \"2000-01-23T04:56:07.000+00:00\", \"description\" : \"Research main competitors' features\", \"title\" : \"Competitor Analysis\", \"taskUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"day\" : \"MONDAY\", \"projectUUID\" : \"550e8400-e29b-41d4-a716-446655440000\", \"status\" : \"pending\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : 404, \"details\" : [ \"Invalid UUID format\", \"Missing required field\" ], \"message\" : \"Resource not found\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
