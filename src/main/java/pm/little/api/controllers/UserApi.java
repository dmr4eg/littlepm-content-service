/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.11.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pm.little.api.controllers;

import jakarta.annotation.Generated;

import jakarta.validation.Valid;
import pm.little.api.models.FormInstance;

import pm.little.api.models.TaskInstance;
import java.util.UUID;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import pm.little.api.models.dto.FormDTO;
import pm.little.api.models.dto.TaskDTO;


import java.util.List;
import java.util.Optional;


@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-03-26T00:36:51.210059+01:00[Europe/Prague]", comments = "Generator version: 7.11.0")
@Validated
@Tag(name = "user", description = "the user API")
public interface UserApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /user/{user_uuid}/form/{form_blueprint_uuid} : Get a user&#39;s form submission
     *
     * @param userUuid The UUID of the user (required)
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @return FormDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidFormFormBlueprintUuidGet",
        summary = "Get a user's form submission",
        responses = {
            @ApiResponse(responseCode = "200", description = "FormDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/form/{form_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FormDTO> userUserUuidFormFormBlueprintUuidGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/form/{form_blueprint_uuid} : Update a user&#39;s form submission
     *
     * @param userUuid The UUID of the user (required)
     * @param formBlueprintUuid The UUID of the form blueprint (required)
     * @param formInstance  (required)
     * @return Updated FormDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidFormFormBlueprintUuidPut",
        summary = "Update a user's form submission",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated FormDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FormDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/form/{form_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FormDTO> userUserUuidFormFormBlueprintUuidPut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "form_blueprint_uuid", description = "The UUID of the form blueprint", required = true, in = ParameterIn.PATH) @PathVariable("form_blueprint_uuid") UUID formBlueprintUuid,
        @Parameter(name = "FormInstance", description = "", required = true) @Valid @RequestBody FormInstance formInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/form/ : List user&#39;s form submissions
     *
     * @param userUuid The UUID of the user (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of FormDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidFormGet",
        summary = "List user's form submissions",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of FormDTO", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FormDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/form/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FormDTO>> userUserUuidFormGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }, { \"blueprint\" : { \"callback_url\" : \"callback_url\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"description\" : \"description\", \"title\" : \"title\" }, \"instance\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"form_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/task/ : List user&#39;s task progress
     *
     * @param userUuid The UUID of the user (required)
     * @param limit Maximum number of items to return (optional)
     * @param offset Number of items to skip before starting to collect the result set (optional)
     * @return A list of TaskDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidTaskGet",
        summary = "List user's task progress",
        responses = {
            @ApiResponse(responseCode = "200", description = "A list of TaskDTO", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDTO.class)))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/task/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<TaskDTO>> userUserUuidTaskGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "limit", description = "Maximum number of items to return", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Number of items to skip before starting to collect the result set", in = ParameterIn.QUERY) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }, { \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /user/{user_uuid}/task/{task_blueprint_uuid} : Get user&#39;s task status
     *
     * @param userUuid The UUID of the user (required)
     * @param taskBlueprintUuid The UUID of the task blueprint (required)
     * @return TaskDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidTaskTaskBlueprintUuidGet",
        summary = "Get user's task status",
        responses = {
            @ApiResponse(responseCode = "200", description = "TaskDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/{user_uuid}/task/{task_blueprint_uuid}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<TaskDTO> userUserUuidTaskTaskBlueprintUuidGet(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "task_blueprint_uuid", description = "The UUID of the task blueprint", required = true, in = ParameterIn.PATH) @PathVariable("task_blueprint_uuid") UUID taskBlueprintUuid
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /user/{user_uuid}/task/{task_blueprint_uuid} : Update user&#39;s task status
     *
     * @param userUuid The UUID of the user (required)
     * @param taskBlueprintUuid The UUID of the task blueprint (required)
     * @param taskInstance  (required)
     * @return Updated TaskDTO (status code 200)
     */
    @Operation(
        operationId = "userUserUuidTaskTaskBlueprintUuidPut",
        summary = "Update user's task status",
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated TaskDTO", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDTO.class))
            })
        },
        security = {
            @SecurityRequirement(name = "user_jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/user/{user_uuid}/task/{task_blueprint_uuid}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TaskDTO> userUserUuidTaskTaskBlueprintUuidPut(
        @Parameter(name = "user_uuid", description = "The UUID of the user", required = true, in = ParameterIn.PATH) @PathVariable("user_uuid") UUID userUuid,
        @Parameter(name = "task_blueprint_uuid", description = "The UUID of the task blueprint", required = true, in = ParameterIn.PATH) @PathVariable("task_blueprint_uuid") UUID taskBlueprintUuid,
        @Parameter(name = "TaskInstance", description = "", required = true) @Valid @RequestBody TaskInstance taskInstance
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"blueprint\" : { \"description\" : \"description\", \"title\" : \"title\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\" }, \"progress\" : { \"user_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"task_blueprint_uuid\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\", \"status\" : true } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
